import { languages, visitTypes } from "../config/constant";
// import * as moment from 'moment';
import moment from 'moment';
import { DecimalPipe } from "@angular/common";
// import { environment } from "../../../../src/environments/environment";
export function getCacheData(parse, key) {
    if (parse) {
        try {
            return JSON.parse(localStorage.getItem(key));
        }
        catch (error) {
            return null;
        }
    }
    else {
        return localStorage.getItem(key);
    }
}
export function setCacheData(key, value) {
    localStorage.setItem(key, value);
}
export function deleteCacheData(key) {
    localStorage.removeItem(key);
}
export function isJsonString(str) {
    try {
        const json = JSON.parse(str);
        return (typeof json === 'object');
    }
    catch (e) {
        return false;
    }
}
export function getEncounterProviderUUID() {
    return getCacheData(true, visitTypes.VISIT_NOTE_PROVIDER).encounterProviders[0].provider.uuid;
}
export function getEncounterUUID() {
    return getCacheData(true, visitTypes.VISIT_NOTE_PROVIDER).uuid;
}
/**
  * Check how old the date is from now
  * @param {string} data - Date in string format
  * @return {string} - Returns how old the date is from now
  */
export function checkIfDateOldThanOneDay(data) {
    let hours = moment(data).diff(moment(), 'hours');
    let minutes = moment(data).diff(moment(), 'minutes');
    minutes = minutes - (hours * 60);
    let resString = "";
    if (hours >= 24) {
        resString = moment(data).format('DD MMM, YYYY hh:mm A');
    }
    else {
        if (hours > 1) {
            resString += hours + " Hours";
        }
        else if (hours === 1) {
            resString += hours + " Hour";
        }
        if (minutes < 0) {
            resString = `Due : ${moment(data).format('DD MMM, YYYY hh:mm A')}`;
        }
        else if (minutes === 1) {
            resString += " " + minutes + " Minute";
        }
        else {
            resString += " " + minutes + " Minutes";
        }
    }
    return resString.trim();
}
/**
  * Compare data for sorting
  * @param {number|string} a
  * @param {number|string} b
  * @param {boolean} isAsc
  * @return {number} - Returns order as 1 or -1
  */
export function compare(a, b, isAsc) {
    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);
}
/**
* Get speciality
* @param {ProviderAttributeModel[]} attr - Array of provider attributes
* @return {string} - Speciality
*/
export function getSpecialization(attr = []) {
    let specialization = '';
    for (const a of attr) {
        if (a.attributeType.uuid == 'ed1715f5-93e2-404e-b3c9-2a2d9600f062' && !a.voided) {
            specialization = a.value;
            break;
        }
    }
    return specialization;
}
export function getFieldValueByLanguage(element) {
    const selectedLanguage = getCacheData(false, languages.SELECTED_LANGUAGE);
    // Check if selected language exists in the lang object and is not empty
    if (element?.lang?.[selectedLanguage]?.trim()) {
        return element.lang[selectedLanguage].trim();
    }
    // Return the first non-empty language value
    for (const langValue of Object.values(element?.lang || {})) {
        if (langValue.trim()) {
            return langValue.trim();
        }
    }
    // Fallback to element.name if no valid language value found or element is invalid
    return element?.name || "";
}
export function calculateBMI(vitals, vitalObs, _locale = 'en') {
    const heightUUID = vitals?.find((v) => v.key === 'height_cm')?.uuid;
    const weightUUID = vitals?.find((v) => v.key === 'weight_kg')?.uuid;
    let height = null, weight = null;
    if (heightUUID && weightUUID) {
        height = vitalObs.find((e) => e.concept.uuid === heightUUID)?.value;
        weight = vitalObs.find((e) => e.concept.uuid === weightUUID)?.value;
    }
    if (height && weight) {
        const decimalPipe = new DecimalPipe(_locale);
        return decimalPipe.transform(weight / ((height / 100) * (height / 100)), "1.2-2");
    }
    return null;
}
export function isFeaturePresent(featureName, notInclude = false) {
    const featureList = ['followUpType', 'tnmStaging', 'referralFacility', 'priorityOfReferral', 'follow-up-instruction', 'doctor-recommendation'];
    if (notInclude)
        return !featureList.includes(featureName);
    return featureList.includes(featureName);
}
export function getCallDuration(given_seconds) {
    let dateObj = new Date(given_seconds * 1000);
    let hours = dateObj.getUTCHours();
    let minutes = dateObj.getUTCMinutes();
    let seconds = dateObj.getSeconds();
    return hours.toString().padStart(2, '0') + ':' +
        minutes.toString().padStart(2, '0') + ':' +
        seconds.toString().padStart(2, '0');
}
export function autoGrowTextZone(e) {
    e.target.style.height = "0px";
    e.target.style.height = (e.target.scrollHeight + 5) + "px";
}
export function autoGrowAllTextAreaZone(e) {
    e.forEach(element => {
        element.style.height = (element.scrollHeight + 5) + "px";
    });
}
export function obsStringify(obs) {
    try {
        delete obs['uuid'];
        Object.keys(obs).forEach((k) => obs[k] == null && delete obs[k]);
        return JSON.stringify(obs);
    }
    catch (error) {
        return "";
    }
}
export function obsParse(obs, uuid = "") {
    try {
        if (uuid)
            return { uuid: uuid, ...JSON.parse(obs) };
        else
            return { ...JSON.parse(obs) };
    }
    catch (error) {
        return { uuid: uuid };
    }
}
//# sourceMappingURL=data:application/json;base64,